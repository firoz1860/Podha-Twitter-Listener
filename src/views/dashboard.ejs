<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .header h1 {
            color: #2c3e50;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .header p {
            color: #7f8c8d;
            font-size: 1.1rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            color: #3498db;
            margin-bottom: 10px;
        }
        
        .stat-label {
            color: #7f8c8d;
            font-size: 1rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .section {
            background: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        
        .section h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.8rem;
        }
        
        .filter-list {
            display: grid;
            gap: 15px;
        }
        
        .filter-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            border-left: 4px solid #3498db;
        }
        
        .filter-name {
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 8px;
        }
        
        .filter-description {
            color: #7f8c8d;
            margin-bottom: 10px;
        }
        
        .filter-query {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 10px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            word-break: break-all;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #3498db;
        }
        
        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: background 0.3s ease;
            margin-right: 10px;
        }
        
        .btn:hover {
            background: #2980b9;
        }
        
        .btn-success {
            background: #27ae60;
        }
        
        .btn-success:hover {
            background: #229954;
        }
        
        .btn-danger {
            background: #e74c3c;
        }
        
        .btn-danger:hover {
            background: #c0392b;
        }
        
        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
        }
        
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .recent-tweets {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .tweet-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid #1da1f2;
        }
        
        .tweet-author {
            font-weight: bold;
            color: #1da1f2;
            margin-bottom: 8px;
        }
        
        .tweet-text {
            color: #2c3e50;
            margin-bottom: 10px;
            line-height: 1.5;
        }
        
        .tweet-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
            color: #7f8c8d;
        }
        
        .tweet-engagement {
            display: flex;
            gap: 15px;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #7f8c8d;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üê¶ Podha Twitter Listener</h1>
            <p>Real-time monitoring of Podha Protocol and RWA narratives</p>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number"><%= stats.total_tweets || 0 %></div>
                <div class="stat-label">Total Tweets</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.unique_authors || 0 %></div>
                <div class="stat-label">Unique Authors</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="system-uptime">Loading...</div>
                <div class="stat-label">System Uptime</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="memory-usage">Loading...</div>
                <div class="stat-label">Memory Usage</div>
            </div>
        </div>

        <div class="section">
            <h2>üéØ Active Filters</h2>
            <div class="filter-list">
                <% filters.forEach(filter => { %>
                <div class="filter-item">
                    <div class="filter-name"><%= filter.name %></div>
                    <div class="filter-description"><%= filter.description %></div>
                    <div class="filter-query"><%= filter.query %></div>
                </div>
                <% }); %>
            </div>
        </div>

        <div class="section">
            <h2>‚ûï Add Custom Filter</h2>
            <div class="alert alert-success" id="success-alert"></div>
            <div class="alert alert-error" id="error-alert"></div>
            
            <form id="filter-form">
                <div class="form-group">
                    <label for="filter-name">Filter Name:</label>
                    <input type="text" id="filter-name" name="name" required>
                </div>
                <div class="form-group">
                    <label for="filter-description">Description:</label>
                    <input type="text" id="filter-description" name="description" required>
                </div>
                <div class="form-group">
                    <label for="filter-query">Search Query:</label>
                    <textarea id="filter-query" name="query" rows="3" required 
                              placeholder="filter:blue_verified min_faves:3 YourKeyword AND (&quot;Term1&quot; OR &quot;Term2&quot;)"></textarea>
                </div>
                <button type="button" class="btn" onclick="testFilter()">Test Filter</button>
                <button type="submit" class="btn btn-success">Add Filter</button>
            </form>
        </div>

        <div class="section">
            <h2>üß™ System Tests</h2>
            <button class="btn" onclick="testDiscord()">Test Discord Webhook</button>
            <button class="btn" onclick="refreshStats()">Refresh Stats</button>
            <button class="btn btn-danger" onclick="clearOldTweets()">Clear Old Tweets</button>
        </div>

        <div class="section">
            <h2>üìä Recent Tweets</h2>
            <div id="recent-tweets" class="recent-tweets">
                <div class="loading">Loading recent tweets...</div>
            </div>
        </div>
    </div>

    <script>
        // Load recent tweets
        async function loadRecentTweets() {
            try {
                const response = await fetch('/api/tweets?limit=10');
                const tweets = await response.json();
                
                const container = document.getElementById('recent-tweets');
                
                if (tweets.length === 0) {
                    container.innerHTML = '<div class="loading">No tweets found</div>';
                    return;
                }
                
                container.innerHTML = tweets.map(tweet => `
                    <div class="tweet-item">
                        <div class="tweet-author">@${tweet.author}</div>
                        <div class="tweet-text">${tweet.text}</div>
                        <div class="tweet-meta">
                            <div class="tweet-engagement">
                                <span>‚ù§Ô∏è ${tweet.likes || 0}</span>
                                <span>üîÑ ${tweet.retweets || 0}</span>
                            </div>
                            <div>${new Date(tweet.sent_at).toLocaleString()}</div>
                        </div>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Failed to load tweets:', error);
                document.getElementById('recent-tweets').innerHTML = 
                    '<div class="loading">Failed to load tweets</div>';
            }
        }

        // Load system stats
        async function loadSystemStats() {
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();
                
                document.getElementById('system-uptime').textContent = 
                    Math.floor(data.system.uptime / 3600) + 'h';
                document.getElementById('memory-usage').textContent = 
                    Math.round(data.system.memory.heapUsed / 1024 / 1024) + 'MB';
            } catch (error) {
                console.error('Failed to load system stats:', error);
            }
        }

        // Test filter
        async function testFilter() {
            const query = document.getElementById('filter-query').value;
            if (!query) {
                showAlert('Please enter a query to test', 'error');
                return;
            }

            try {
                const response = await fetch('/api/test-filter', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query })
                });

                const result = await response.json();
                
                if (response.ok) {
                    showAlert(`Filter test passed! Estimated ${result.estimatedResults} results`, 'success');
                } else {
                    showAlert(result.error, 'error');
                }
            } catch (error) {
                showAlert('Filter test failed', 'error');
            }
        }

        // Test Discord webhook
        async function testDiscord() {
            try {
                const response = await fetch('/api/test-discord', { method: 'POST' });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('Discord webhook test successful!', 'success');
                } else {
                    showAlert('Discord webhook test failed', 'error');
                }
            } catch (error) {
                showAlert('Discord test failed', 'error');
            }
        }

        // Add filter form handler
        document.getElementById('filter-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);
            
            try {
                const response = await fetch('/api/filters', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });

                const result = await response.json();
                
                if (response.ok) {
                    showAlert('Filter added successfully!', 'success');
                    e.target.reset();
                    setTimeout(() => location.reload(), 2000);
                } else {
                    showAlert(result.error, 'error');
                }
            } catch (error) {
                showAlert('Failed to add filter', 'error');
            }
        });

        // Utility functions
        function showAlert(message, type) {
            const alertId = type === 'success' ? 'success-alert' : 'error-alert';
            const alert = document.getElementById(alertId);
            alert.textContent = message;
            alert.style.display = 'block';
            
            setTimeout(() => {
                alert.style.display = 'none';
            }, 5000);
        }

        function refreshStats() {
            location.reload();
        }

        function clearOldTweets() {
            if (confirm('Are you sure you want to clear old tweets?')) {
                showAlert('Feature coming soon', 'success');
            }
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', () => {
            loadRecentTweets();
            loadSystemStats();
            
            // Refresh data every 30 seconds
            setInterval(() => {
                loadRecentTweets();
                loadSystemStats();
            }, 30000);
        });
    </script>
</body>
</html>